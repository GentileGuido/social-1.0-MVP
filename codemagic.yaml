workflows:
  android-release:
    # Nombre amigable en la UI de Codemagic
    name: Build Android Release

    # Entorno: Node 18, no usamos Flutter aquí
    environment:
      node: 18
      flutter: none

      # Caché para acelerar builds sucesivas
      cache:
        npm: true
        cocoapods: true

    # Variables de entorno (opcional, encriptadas desde Settings → Environment variables)
    # env:
    #   CODEMAGIC_API_TOKEN: Encrypted("…")

    scripts:
      # 1. Instala las dependencias con lockfile
      - npm install

      # 2. Genera proyecto Android native (Expo prebuild)
      - npx expo prebuild --platform android --no-install

      # 3. Parches mínimos para expo-splash-screen (solventar warnings/errores en Android Gradle)
      - sed -i.bak "/classifier =/d" node_modules/expo-splash-screen/android/build.gradle
      - sed -i.bak "/artifact(androidSourcesJar)/d" node_modules/expo-splash-screen/android/build.gradle.kts

      # 4. Forzamos versiones de SDK en gradle.properties
      - echo "android.compileSdkVersion=33"  >> android/gradle.properties
      - echo "android.targetSdkVersion=33"   >> android/gradle.properties
      - echo "android.minSdkVersion=24"      >> android/gradle.properties
      - echo "kotlin.compiler.jvmTarget=17"  >> android/gradle.properties

      # 5. Compila el APK en modo Release
      - cd android && ./gradlew assembleRelease

    # Ruta donde Codemagic debe buscar el APK resultante
    artifacts:
      - android/app/build/outputs/apk/release/app-release.apk

    # Se lanza la build automáticamente al pushear a main
    triggers:
      push:
        branches:
          - main
